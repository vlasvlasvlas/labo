y = Wind)) +
geom_point()
ggplot(airquality,
aes(x = Ozone,
y = Wind)) +
geom_miss_point() +
facet_wrap(~Month)
n_miss(airquality)
n_complete(airquality) #a traves de todas las filas y columnas
prop_miss(airquality) # porcentaje vacios : 0.04793028
prop_complete(airquality) #porcentaje de completos
prop_miss_case(airquality) # porcentaje de filas caltantes
prop_miss_var(airquality) # porcentaje de filas caltantes
library(dplyr)
miss_var_summary(group_by(airquality,Month))
miss_case_summary(airquality)
miss_case_summary(group_by(airquality,Month))
miss_case_table(airquality)
group_by(airquality,Month)
airquality %>% group_by(Month) %>% miss_var_summary()
tabla_tipo <- airquality %>%
# agrupamos por la variable factor
group_by(Day) %>%
# resumimos contando el n?mero de casos de cada nivel del factor
summarise(n=n())
# Para calcular los porcentajes
mutate(tabla_tipo,percent=round(100*n/sum(n),2))
gg_miss_fct( x = airquality, fct = Month)
bind_shadow(airquality) #suma NA o !NA
# VIM
install.packages('VIM')
library(VIM)
aggr(airquality, prop=F, numbers=T, border=NA, combined=T)
marginplot(airquality[,c("Ozone","Wind")])
marginplot(airquality[,c("Wind","Month")])
marginplot(airquality[,c("Ozone","Month")])
marginplot(airquality[,c("Ozone","Temp")])
marginplot(airquality[,c("Ozone","Wind")])
marginplot(airquality[,c("Ozone","Temp")])
aggr(airquality, prop=F, numbers=T, border=NA, combined=T)
aggr(airquality, prop=T, numbers=T, border=NA, combined=T)
aggr(airquality, prop=F, numbers=T, border=NA, combined=T)
marginplot(airquality[,c("Ozone","Wind")])
x1 <- c("Dic", "Abr", "Ene", "Mar")
x2 <- c("Dic", "Abr", "Eme", "Mar")
y1 <- factor(x1, levels = niveles_meses)
y1
y1 <- factor(x1, levels = niveles_meses)
niveles_meses <- c(
"Ene", "Feb", "Mar", "Abr", "May", "Jun",
"Jul", "Ago", "Sep", "Oct", "Nov", "Dic"
)
y1 <- factor(x1, levels = niveles_meses)
x1 <- c("Dic", "Abr", "Ene", "Mar")
y1
library(tidyverse)
library(spData)
install.packages("sp")
library(spData)
library(sf)
install.packages("sf")
library(sf)
library(tmap)
install.packages("tmap")
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(spData)
library(sp)
data(world)
install.packages(c("cluster.datasets"), dependencies = TRUE)
library(sp)
data(world)
library(cluster.datasets)
data(life.expectancy.1971)
data(world)
install.packages("sf")
library(devtools)
install_github("r-spatial/sf")
data(world)
library(sp)
data(world)
library(tidyverse)
library(Rcpp)
library(spData)
library(sp)
library(sf)
x <- list(2, "a", "b", TRUE)
x
x[[2]]
x <- c(1,3, 5)
y <- c(3, 2, 10)
y <- c(3, 2, 10)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- c(4, "a", TRUE)
x
class(x)
library(datasets)
data(mtcars)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
library(datasets)
data(mtcars)
round(mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp))
library(datasets)
data(iris)
?iris
round(mean(iris[iris$Species == "virginica",]$Sepal.Length))
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332){
## Create a empty data frame
df <- data.frame()
## Looping to read each file in the directory
for(i in id){
files <- read.csv(paste(directory,
"/",
sprintf("%03d", i),
".csv",
sep =""
))
## Merge all files in a single data frame
df <- rbind(df, files)
}
## Returns the average of selected pollutant
mn <- mean(df[[pollutant]], na.rm = TRUE)
mn
}
pollutantmean("specdata", "sulfate", 34)
styler:::style_active_file()
styler:::style_selection()
#  This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(x) {
m <<- x
i <<- NULL
}
get <- function() m
setInv <- function(x) i <<- x
getInv <- function() i
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed), then
# the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(m, ...) {
x <- m$getInv()
if (!is.null(x)) {
message("cached data")
return(x)
}
m$setInv(solve(m$get()))
m$getInv()
}
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
summary(cars)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(titanic)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
plot(cars)
# comentario
summary(cars)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
# comentario
plot(cars)
unlink('MAESTRIA_AUSTRAL/MATERIA5 ANALISIS INTELIGENTE DE DATOS/MATERIAL/HTMLs5/tests_rmarkdown/testmd_cache', recursive = TRUE)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
#codigo
# comentario
plot(cars)
plot(cars)
histogram(cars)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
#codigo
# comentario
plot(cars)
plot(cars)
hist(cars)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
#codigo
# comentario
plot(cars)
plot(cars)
boxplot(cars)
library(knitr)
library(rmdformats)
library(formatR)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# comentario
summary(cars)
#codigo
# comentario
plot(cars)
plot(cars)
boxplot(cars)
x <- 5  # radius of a circle
devtools::install_github('mwip/beautifyR')
# --- data
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
titanic <- read_delim("titanic.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
# --- libs
library(tidyverse)
library(shiny)
library(readr)
library(dplyr)
# --- data
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
titanic <- read_delim("titanic.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
titanic <- data(titanic)
---
title: |
| Análisis Inteligente de Datos
| Mag. Marcos Prunello - Mag. Diego Marfetán Molina
| Maestría Ciencia de Datos
| Universidad Austral
author: |
| Grupo3 :
| Cristian Di Bono
| Antonio Rial
| Vladimiro Bellini
subtitle: |
| TPN2
date: "31/8/2021"
output:
rmdformats::readthedown:
code_folding: show
self_contained: true
thumbnails: false
lightbox: false
html_document:
toc: true
toc_float:
collapsed: false
smooth_scroll: false
number_sections: true
highlight: tango
number_sections: true
library(ggplot2)
library(ggthemes)
library(GGally)
library(readr)
library(plotly)
library(ggpubr)
library(dplyr)
library(cowplot)
library(DT)
library(modeest)
library(sqldf)
library(styler)
library(extrafont)
library(tidyr)
library(knitr)
library(skimr)
library(corrplot)
## Global options
options(max.print="90")
options(encoding = 'UTF-8')
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=90)
knitr::opts_chunk$set(echo = TRUE)
resultado <-
readr::read_delim(
"resultado.txt",
"\t",
escape_double = FALSE,
locale = readr::locale(encoding = "ISO-8859-1"),
trim_ws = TRUE
)
par(mfrow= c(1,1))
corrplot(cor(resultado[,8:18])) +
theme_few()
library(ggplot2)
library(ggthemes)
library(GGally)
library(readr)
library(plotly)
library(ggpubr)
library(dplyr)
library(cowplot)
library(DT)
library(modeest)
library(sqldf)
library(styler)
library(extrafont)
library(tidyr)
library(knitr)
library(skimr)
library(corrplot)
library(stringr)
library(clipr)
library(scales)
# # Global options
options(max.print="90")
options(encoding = 'UTF-8')
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=90)
knitr::opts_chunk$set(echo = TRUE)
resultado <-
readr::read_delim(
"resultado.txt",
"\t",
escape_double = FALSE,
locale = readr::locale(encoding = "ISO-8859-1"),
trim_ws = TRUE
)
par(mfrow= c(1,1))
corrplot(cor(resultado[,8:18]))
corrplot(cor(resultado[,8:18]), method = 'number')
install.packages('tinytex')
tinytex::install_tinytex()  # Instala TinyTeX
tinytex::install_tinytex()
install.packages("latexpdf")
install.packages("tinytex")
install.packages("TinyTeX")
library(ggplot2)
library(ggthemes)
library(GGally)
library(readr)
library(plotly)
library(ggpubr)
library(dplyr)
library(cowplot)
library(DT)
library(modeest)
library(sqldf)
library(styler)
library(extrafont)
library(tidyr)
library(knitr)
library(skimr)
library(corrplot)
library(stringr)
library(clipr)
library(scales)
library(funModeling)
library(tinytex)
library(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
library(kableExtra)
remove.packages("kableExtra", lib="~/R/win-library/4.0")
install.packages("kableExtra")
# Se prepara el ambiente de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
graphics.off()
options(scipen = 999) # Desactiva notación científica
# Ponemos el Locale en español
Sys.setlocale("LC_TIME", "Spanish")
Sys.getlocale("LC_TIME")
# install.packages("devtools")
# library(devtools)
# devtools::install_github("kassambara/easyGgplot2")
# library(easyGgplot2)
knitr::opts_chunk$set(echo = TRUE)
# Se revisan e instalan los paquetes necesarios para el análisis.
listofpackages <- c("readxl","rstudioapi", "readr", "dplyr", "vcd", "ggplot2", "ggthemes", "GGally", "rpart", "rpart.plot", "partykit", "naniar", "modeest", "caret", "ROCR","skimr","VIM", "corrplot","sqldf","cowplot","PerformanceAnalytics", "psych", "knitr", "pastecs", "FactoMineR", "grid", "gridExtra", "ggfortify", "factoextra","outliers","cluster","NbClust","caret","rpart.plot","kableExtra","rmarkdown","rmdformats","funModeling","magrittr")
newPackages <- listofpackages[!(listofpackages %in% installed.packages()[, "Package"])]
if (length(newPackages)) install.packages(newPackages)
for (paquete in listofpackages) {
suppressMessages(library(paquete, character.only = TRUE))
}
# Se configura el styler
options(styler.save_after_styling = TRUE)
cardio <- read_excel("cardio.xls")
# Revisión de nulos (aggr)
aggr(cardio, numbers=TRUE, border=NA, combine=TRUE)
library(ISLR)
dataset <- Default
dataset <- Default
dataset
dataset
summary(dataset)
dataset$no_default <- ifelse(default == "Yes","No","Yes")
dataset$no_default <- ifelse(dataset$default == "Yes","No","Yes")
summary(dataset)
View(dataset)
dataset$no_default <- as.factor(dataset$no_default)
summary(dataset)
histogram(dataset$default)
hist(dataset$default)
hist(dataset$balance)
hist(dataset$income)
hist(dataset$balance)
install.packages("randomForest")
q()
source("F:/labimp_1/labo/src/ranger/vb_433_ranger_BO.r")
