# Rondas siguientes
# TO-DO: Funcion de ronda siguiente
#-------------------------------------------------------------
#Ronda 2:
# nos quedamos con los jugadores que pasan
mediana  <- planilla_cazatalentos[ ids_juegan1, (mean(p_res_tiros1,na.rm = TRUE)*median_ronda2) ]
#mediana  <-planilla_cazatalentos[ ids_juegan1, p_res_tiros1[{q<-rank(p_res_tiros1)/length(p_res_tiros1);q<0.1 | q>=0.9}] ]
# nuestros nuevos jugadores estan en ids_juegan2
ids_juegan2  <- planilla_cazatalentos[ ids_juegan1 ][ p_res_tiros1 >= mediana, id ]
# probamos con nueva variable de tiros
var_tiros_r2 <- round(var_tiros_r1 * mult_tiradas) + suma_tiradas
# registros:
planilla_cazatalentos[ ids_juegan2,  tiros2 := var_tiros_r2 ]
resultado2  <- gimnasio_tirar( ids_juegan2, var_tiros_r2)
# cargamos planilla con resultados
planilla_cazatalentos[ ids_juegan2,
aciertos2 := resultado2 #registro en la planilla la cantidad de aciertos
]
# cargamos planilla con resultados porcent
planilla_cazatalentos[ ids_juegan2,
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos2 + aciertos 1) / (var_tiros_r1 + var_tiros_r2)
p_res_tiros2 := (
resultado2 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan2]$aciertos1
)
/
(var_tiros_r1+
var_tiros_r2)
]
#-------------------------------------------------------------
#Ronda 3:
# nos quedamos con los jugadores que pasan
mediana  <- planilla_cazatalentos[ ids_juegan2, (mean(p_res_tiros2,na.rm = TRUE)*median_ronda3) ]
#mediana  <-planilla_cazatalentos[ ids_juegan2, p_res_tiros2[{q<-rank(p_res_tiros2)/length(p_res_tiros2);q<0.1 | q>=0.9}] ]
# nuestros nuevos jugadores estan en ids_juegan3
ids_juegan3  <- planilla_cazatalentos[ ids_juegan2 ][ p_res_tiros2 >= mediana, id ]
# probamos con nueva variable de tiros
var_tiros_r3 <- round(var_tiros_r2 * mult_tiradas) + suma_tiradas
# registros
planilla_cazatalentos[ ids_juegan3,  tiros3 := var_tiros_r3 ]
resultado3  <- gimnasio_tirar( ids_juegan3, var_tiros_r3)
# sumamos el cantidad de aciertos
planilla_cazatalentos[ ids_juegan3,  aciertos3 := resultado3 ]
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos3 + aciertos2 + aciertos 1) / (var_tiros_r1 + var_tiros_r2 + var_tiros_r3)
planilla_cazatalentos[ ids_juegan3,
p_res_tiros3 :=
(  resultado3 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan3]$aciertos1+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan3]$aciertos2
)
/
(var_tiros_r1+
var_tiros_r2+
var_tiros_r3)
]
#-------------------------------------------------------------
#Ronda 4:
#A la mitad mejor la hago tirar
if ( exists ("var_tiros_r3") ) {
# nos quedamos con los jugadores que pasan
mediana  <- planilla_cazatalentos[ ids_juegan3, (mean(p_res_tiros3,na.rm = TRUE)*median_ronda4) ]
#mediana  <-planilla_cazatalentos[ ids_juegan3, p_res_tiros3[{q<-rank(p_res_tiros3)/length(p_res_tiros3);q<0.1 | q>=0.9}] ]
# nuestros nuevos jugadores estan en ids_juegan4
ids_juegan4  <- planilla_cazatalentos[ ids_juegan3 ][ p_res_tiros3 >= mediana, id ]
# esto es parecido al script anterior, pero reviso si tengo chance de jugar otra ronda mas, es necesaria una nueva ronda? o me quita tiradas de forma innecesaria?
if (length(ids_juegan4) <= count_mayor_a ){
# hay al menos n candidatos? tomar el maximo y cerrar rondas
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda anterior
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros3) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
} else {
# start else ronda
# hay mas de 10 candidatos
# probamos con nueva variable de tiros
var_tiros_r4 <- round(var_tiros_r3 + mult_tiradas) + suma_tiradas
planilla_cazatalentos[ ids_juegan4,  tiros4 := var_tiros_r4 ]
resultado4  <- gimnasio_tirar( ids_juegan4, var_tiros_r4)
# sumamos el cantidad de aciertos
planilla_cazatalentos[ ids_juegan4,  aciertos4 := resultado4 ]
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos 1 + aciertos2 + aciertos3 + aciertos4) / (var_tiros_r1 + var_tiros_r2 + var_tiros_r3 + var_tiros_r4)
planilla_cazatalentos[ ids_juegan4,
p_res_tiros4 :=
(  resultado4 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan4]$aciertos1+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan4]$aciertos2+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan4]$aciertos3
)
/
(var_tiros_r1+
var_tiros_r2+
var_tiros_r3+
var_tiros_r3)
]
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda anterior
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros4) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
# end else ronda
}
}
#-------------------------------------------------------------
#Ronda 5:
#A la mitad mejor la hago tirar
if ( exists ("var_tiros_r4") ) {
# nos quedamos con los jugadores que pasan
mediana  <- planilla_cazatalentos[ ids_juegan4, (mean(p_res_tiros4,na.rm = TRUE)*median_ronda5) ]
#mediana  <-planilla_cazatalentos[ ids_juegan4, p_res_tiros4[{q<-rank(p_res_tiros4)/length(p_res_tiros4);q<0.1 | q>=0.9}] ]
# nuestros nuevos jugadores estan en ids_juegan5
ids_juegan5  <- planilla_cazatalentos[ ids_juegan4 ][ p_res_tiros4 >= mediana, id ]
# esto es parecido al script anterior, pero reviso si tengo chance de jugar otra ronda mas, es necesaria una nueva ronda? o me quita tiradas de forma innecesaria?
if (length(ids_juegan5) <= count_mayor_a ){
# hay al menos n candidatos? tomar el maximo y cerrar rondas
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda anterior
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros4) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
} else {
# start else ronda
# hay mas de 10 candidatos
# probamos con nueva variable de tiros
var_tiros_r5 <- round(var_tiros_r4 * mult_tiradas) + suma_tiradas
planilla_cazatalentos[ ids_juegan5,  tiros5 := var_tiros_r5 ]
resultado5  <- gimnasio_tirar( ids_juegan5, var_tiros_r5)
# sumamos el cantidad de aciertos
planilla_cazatalentos[ ids_juegan5, aciertos5 := resultado5 ]
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos 1 + aciertos2 + aciertos3 + aciertos4 + aciertos5) / (var_tiros_r1 + var_tiros_r2 + var_tiros_r3 + var_tiros_r4 + var_tiros_r5)
planilla_cazatalentos[ ids_juegan5,
p_res_tiros5 :=
(  resultado5 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan5]$aciertos1+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan5]$aciertos2+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan5]$aciertos3+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan5]$aciertos4
)
/
(var_tiros_r1+
var_tiros_r2+
var_tiros_r3+
var_tiros_r3+
var_tiros_r4)
]
#Epilogo para ronda6
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda7
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros5) ] # fix, reviso el que tenga el mayor porcentaje de aciertos acumulados
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
# end else ronda
}
}
#-------------------------------------------------------------
#Ronda 6: subiendo de a 10
#A la mitad mejor la hago tirar
if ( exists ("var_tiros_r5") ) {
# nos quedamos con los jugadores que pasan
mediana  <- planilla_cazatalentos[ ids_juegan5, (mean(p_res_tiros5,na.rm = TRUE)*median_ronda6) ]
#mediana  <-planilla_cazatalentos[ ids_juegan5, p_res_tiros5[{q<-rank(p_res_tiros5)/length(p_res_tiros5);q<0.1 | q>=0.9}] ]
# nuestros nuevos jugadores estan en ids_juegan6
ids_juegan6  <- planilla_cazatalentos[ ids_juegan5 ][ p_res_tiros5 >= mediana, id ]
# esto es parecido al script anterior, pero reviso si tengo chance de jugar otra ronda mas, es necesaria una nueva ronda? o me quita tiradas de forma innecesaria?
if (length(ids_juegan6) <= count_mayor_a ){
# hay al menos n candidatos? tomar el maximo y cerrar rondas
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda anterior
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros5) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
} else {
# start else ronda
# hay mas de 5 candidatos
# probamos con nueva variable de tiros
var_tiros_r6 <- round(var_tiros_r5 * mult_tiradas) + suma_tiradas
planilla_cazatalentos[ ids_juegan6,  tiros6 := var_tiros_r6 ]
resultado6  <- gimnasio_tirar( ids_juegan6, var_tiros_r6)
# sumamos el cantidad de aciertos
planilla_cazatalentos[ ids_juegan6,  aciertos6 := resultado6 ]
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos 1 + aciertos2 + aciertos3 + aciertos4 + aciertos5 + aciertos6) / (var_tiros_r1 + var_tiros_r2 + var_tiros_r3 + var_tiros_r4 + var_tiros_r5 + var_tiros_r6)
planilla_cazatalentos[ ids_juegan6,
p_res_tiros6 :=
(  resultado6 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan6]$aciertos1+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan6]$aciertos2+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan6]$aciertos3+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan6]$aciertos4+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan6]$aciertos5
)
/
(var_tiros_r1+
var_tiros_r2+
var_tiros_r3+
var_tiros_r3+
var_tiros_r4+
var_tiros_r5)
]
#Epilogo para ronda
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda7
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros6) ] # fix, reviso el que tenga el mayor porcentaje de aciertos acumulados
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
# end else ronda
}
}
#-------------------------------------------------------------
#Ronda 7: subiendo de a 10
#A la mitad mejor la hago tirar
if ( exists ("var_tiros_r6") ) {
# nos quedamos con los jugadores que pasan la mediana del % de p_res_tiros2:
mediana  <- planilla_cazatalentos[ ids_juegan6, (mean(p_res_tiros6,na.rm = FALSE)*median_ronda7) ] #fix sobre porcent tiros
# nuestros nuevos jugadores estan en ids_juegan7
ids_juegan7  <- planilla_cazatalentos[ ids_juegan6 ][ p_res_tiros6 >= mediana, id ]
# esto es parecido al script anterior, pero reviso si tengo chance de jugar otra ronda mas, es necesaria una nueva ronda? o me quita tiradas de forma innecesaria?
if (length(ids_juegan7) < count_mayor_a  ){
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda6
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros6) ]
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
#Finalmente, la hora de la verdadero_mejor
#Termino el juego
veredicto  <- gimnasio_veredicto( id_mejor )
} else {
# probamos con nueva variable de tiros
var_tiros_r7 <- round(var_tiros_r6 * mult_tiradas) + suma_tiradas
planilla_cazatalentos[ ids_juegan7,  tiros7 := var_tiros_r7 ]
resultado7  <- gimnasio_tirar( ids_juegan7, var_tiros_r7)
# sumamos el cantidad de aciertos
planilla_cazatalentos[ ids_juegan7,  aciertos7 := resultado7 ]
# denuevo probamos con % nose si funcionara:
# SOLO le sumamos a los jugadores que tenemos filtrados en id_juegan
# NUEVO porcent:
# (aciertos 1 + aciertos2 + aciertos3 + aciertos4 + aciertos5 + aciertos6) / (var_tiros_r1 + var_tiros_r2 + var_tiros_r3 + var_tiros_r4 + var_tiros_r5 + var_tiros_r6)
planilla_cazatalentos[ ids_juegan7,
p_res_tiros7 :=
(  resultado7 +
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos1+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos2+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos3+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos4+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos5+
planilla_cazatalentos[planilla_cazatalentos$id %in% ids_juegan7]$aciertos6
)
/
(var_tiros_r1+
var_tiros_r2+
var_tiros_r3+
var_tiros_r3+
var_tiros_r4+
var_tiros_r5+
var_tiros_r6)
]
#Epilogo
#El cazatalentos toma una decision, elige al que mas aciertos tuvo en la ronda7
pos_mejor <-  planilla_cazatalentos[ , which.max(p_res_tiros7) ] # fix, reviso el que tenga el mayor porcentaje de aciertos acumulados
id_mejor  <-  planilla_cazatalentos[ pos_mejor, id ]
} # ELSE para ronda
}
return( veredicto )
}
#------------------------------------------------------------------------------
#Aqui hago la Estimacion Montecarlo del porcentaje de aciertos que tiene la estrategia VB001!
set.seed( 295873 )  #debe ir una sola vez, ANTES de los experimentos
# primos
# 295873
# 527173 - 2do seed
# 328789
# 825733
# 191519
# 341963
# 590771
# 765103
# 402263
# 584707
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:cant_experimentos ) #10k experimentos
{
# hace un cat del numero de experimento cada mil experimentos:
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
#por cada iteración de las 10k iteraciones, genera la variable veredicto, y pone el resultado de las estrategias:
veredicto  <- Estrategia_intento002() # guarda el resultado
# rbind: unir agregando filas, cuando sabemos que los nombres de las columnas (variables), son iguales y están en el mismo orden
tabla_veredictos  <- rbind( tabla_veredictos, veredicto ) #agrega filas de los resultados de veredicto al datatable tabla_veredictos
}
# esto lo usaba para verificar el id jugador de a 1 ronda
# cat(" Cual es el jugador (sabiendo el id para tener un check):\n")
# as.integer( GLOBAL_jugadores == 0.7)
# which(GLOBAL_jugadores == 0.7)
# cat("\n")
#cat("Planilla en 1ra ronda:")
#View(planilla_cazatalentos)
#cat("\n")
cat("Tabla veredictos:")
tabla_veredictos
cat("\n")
cat("Tiros total y tasa eleccion correcta:")
tiros_total  <-  tabla_veredictos[  , max( tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean( acierto) ]
tiros_total
tasa_eleccion_correcta
cat("\n")
# Este script esta pensado para correr en la PC local
# Optimizacion Bayesiana de hiperparametros de  lightgbm, con el metodo TRADICIONAL de los hiperparametros originales de lightgbm
# 5-fold cross validation
# la probabilidad de corte es un hiperparametro
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("lightgbm")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 150   #aumento las iteraciones ya que tengo dos hiperparametros mas
#Aqui se cargan los hiperparametros
hs <- makeParamSet(
makeNumericParam("learning_rate",    lower=  0.01 , upper=    0.3),
makeNumericParam("feature_fraction", lower=  0.2  , upper=    1.0),
makeIntegerParam("min_data_in_leaf", lower=  0    , upper= 8000),
makeIntegerParam("num_leaves",       lower= 1L   , upper= 60L),
makeNumericParam("prob_corte",       lower= 1/120 , upper=  1/20),
makeNumericParam("lambda_l1",        lower=  0    , upper=   100), #AGREGADO recien
makeNumericParam("lambda_l2",        lower=  0    , upper=   100)  #AGREGADO recien
#num_iterations < 400,
#num_leaves < 30,
# 2000 < min_data_in_leaf < 3000,
# 0.4 < feature_fraction < 0.5
)
ksemilla_azar  <- 295873  #Aqui poner la propia semilla
# primos
# 295873
# 527173
# 328789
# 825733
# 191519
# 341963
# 590771
# 765103
# 402263
# 584707
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./exp/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#esta funcion calcula internamente la ganancia de la prediccion probs
fganancia_logistic_lightgbm   <- function( probs, datos)
{
vlabels  <- get_field(datos, "label")
gan  <- sum( (probs > PROB_CORTE  ) *
ifelse( vlabels== 1, 59000, -1000 ) )
return( list( "name"= "ganancia",
"value"=  gan,
"higher_better"= TRUE ) )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales, la semilla del mal ...
EstimarGanancia_lightgbm  <- function( x )
{
gc()  #libero memoria
#llevo el registro de la iteracion por la que voy
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
PROB_CORTE <<- x$prob_corte   #asigno la variable global
kfolds  <- 5   # cantidad de folds para cross validation
param_basicos  <- list( verbose= -1,
objective= "binary",
metric= "custom",
first_metric_only= TRUE,
boost_from_average= TRUE,
feature_pre_filter= FALSE,
verbosity= -100,
seed= ksemilla_azar,
max_depth=  -1,         # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split= 0.0, #por ahora, lo dejo fijo
# lambda_l1= 0.0,        # ATENCION LINEA COMENTADA
# lambda_l2= 0.0,        # ATENCION LINEA COMENTADA
max_bin= 31,            #por ahora, lo dejo fijo
num_iterations= 9999,    #un numero muy grande, lo limita early_stopping_rounds
force_row_wise= TRUE    #para que los alumnos no se atemoricen con tantos warning
)
#el parametro discolo, que depende de otro
param_variable  <- list(  early_stopping_rounds= as.integer(50 + 5/x$learning_rate) )
param_completo  <- c( param_basicos, param_variable, x )
set.seed( ksemilla_azar )
# primos
# 295873
# 527173 - 2do seed
# 328789
# 825733
# 191519
# 341963
# 590771
# 765103
# 402263
# 584707
modelocv  <- lgb.cv( data= dtrain,
eval= fganancia_logistic_lightgbm,
stratified= TRUE, #sobre el cross validation
nfold= kfolds,    #folds del cross validation
param= param_completo,
verbose= -100, #no warnings
seed= ksemilla_azar
)
#obtengo la ganancia
ganancia  <- unlist(modelocv$record_evals$valid$ganancia$eval)[ modelocv$best_iter ]
ganancia_normalizada  <-  ganancia* kfolds     #normailizo la ganancia
#el lenguaje R permite asignarle ATRIBUTOS a cualquier variable
attr(ganancia_normalizada ,"extras" )  <- list("num_iterations"= modelocv$best_iter)  #esta es la forma de devolver un parametro extra
param_completo$num_iterations <- modelocv$best_iter  #asigno el mejor num_iterations
param_completo["early_stopping_rounds"]  <- NULL     #elimino de la lista el componente  "early_stopping_rounds"
#logueo
xx  <- param_completo
xx$ganancia  <- ganancia_normalizada   #le agrego la ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("F:\\labimp_1\\")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv")
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "labo\\exp\\",  showWarnings = FALSE )
dir.create( "labo\\exp\\HT5370/", showWarnings = FALSE )
setwd("F:\\labimp_1\\labo\\exp\\HT5370\\")   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- "HT537.RDATA"
klog        <- "HT537.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso la clase a binaria que tome valores {0,1}  enteros
dataset[ , clase01 := ifelse( clase_ternaria=="BAJA+2", 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia_lightgbm   #la funcion que voy a maximizar
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar, #la funcion que voy a maximizar
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,     #definido al comienzo del programa
has.simple.signature = FALSE   #paso los parametros en una lista
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)  #se graba cada 600 segundos
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )   #cantidad de iteraciones
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI() )
#establezco la funcion que busca el maximo
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( kbayesiana ) ) {
run  <- mbo(obj.fun, learner= surr.km, control= ctrl)
} else {
run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
}
quit( save="no" )
